// select() -> no servidor, para bloquear enquanto espera 
// pelo udp tcp


// for server
signal(SIGPIPE, SIG_IGN)
signal(SIGCHILD, SIG_IGN)

// select()


while (n < MAX_RESEND){
    sendto()
    // ...
    int ret = recvfrom()
    if (ret < 0){
        if errno == EWOULDBLOCK || errno == EAGAIN
            // timetout -> resend
            // setsockopt -> sets timeout 

    }
}


// tejo.tecnico.ulisboa.pt
// port 58011






    // fd = socket(AF_INET, SOCK_DGRAM, 0); // UDP socket
    // if (fd == -1)                        /*error*/
    //     exit(1);

    // memset(&hints, 0, sizeof hints);
    // hints.ai_family = AF_INET;      // IPv4
    // hints.ai_socktype = SOCK_DGRAM; // UDP socket
    // hints.ai_flags = AI_PASSIVE;

    // errcode = getaddrinfo(NULL, DEFAULT_PORT, &hints, &res);
    // if (errcode != 0) /*error*/
    //     exit(1);

    // n = bind(fd, res->ai_addr, res->ai_addrlen);
    // if (n == -1) /*error*/
    //     exit(1);

    // while (1)
    // {
    //     addrlen = sizeof(addr);
    //     n = recvfrom(fd, buffer, 128, 0,
    //                  (struct sockaddr *)&addr, &addrlen);
    //     if (n == -1) /*error*/
    //         exit(1);
    //     write(1, "received: ", 10);
    //     write(1, buffer, n);

    //     n = sendto(fd, buffer, n, 0,
    //                (struct sockaddr *)&addr, addrlen);
    //     if (n == -1) /*error*/
    //         exit(1);
    // }
    // freeaddrinfo(res);
    // close(fd);